package events

import "time"

// The Event type represents unique events generated by the program. They carry
// context about how they were triggered and information to pass to handlers.
type Event struct {
	// Message carries information about the event in a human-readable format.
	Message string

	// Args is the list of arguments of the event, it is intended to give
	// context about the information carried by the even in a format that can
	// be processed by a program.
	Args Args

	// Time is the time at which the event was generated.
	Time time.Time

	// PC is the program counter address of the function that generated the
	// event. It may be zero to indicated that the information was not or could
	// not be retrieved.
	PC uintptr

	// Debug is set to true if this is a debugging event.
	Debug bool
}

// Clone makes a deep copy of the event, the returned value doesn't shared any
// pointer with the original.
func (e *Event) Clone() *Event {
	var a Args
	var m []byte

	if n := len(e.Args); n != 0 {
		a = make(Args, n)
		copy(a, e.Args)
	}

	if n := len(e.Message); n != 0 {
		m = make([]byte, n)
		copy(m, e.Message)
	}

	return &Event{
		Message: string(m),
		Args:    a,
		Time:    e.Time,
		PC:      e.PC,
		Debug:   e.Debug,
	}
}

// Args reprsents a list of event arguments.
type Args []Arg

// Arg represents a single event argument.
type Arg struct {
	Name  string
	Value interface{}
}

// Get returns the value of the argument with name within args.
func (args Args) Get(name string) (v interface{}, ok bool) {
	for _, arg := range args {
		if arg.Name == name {
			v, ok = arg.Value, true
			break
		}
	}
	return
}
